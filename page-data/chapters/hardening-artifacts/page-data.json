{"componentChunkName":"component---node-modules-rocketseat-gatsby-theme-docs-core-src-templates-docs-query-js","path":"/chapters/hardening-artifacts","result":{"data":{"mdx":{"id":"3dba49be-2fa8-5a3f-8f45-84237b35824a","excerpt":"Given all sources including dependency definitions are trusted, and the sourcces produced artifacts without lacking dependency information as possible, but weâ€¦","fields":{"slug":"/chapters/hardening-artifacts/"},"frontmatter":{"title":"Hardening Artifacts","description":null,"image":null,"disableTableOfContents":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Hardening Artifacts\",\n  \"metaTitle\": \"TODO\",\n  \"metaDescription\": \"TODO\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Given all sources including dependency definitions are trusted, and the sourcces produced artifacts without lacking dependency information as possible, but we have still some challenges.\\nOne of the major challenges is that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"the artifact does not include neither who generated the artifacts nor when and how the artifacts was made.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"who\"), \": In the last chapter, you built some container images. You know you yourself built, but others can't know that in general. What if a container running in production environments is suspicious and one gets worried about who generated the image?\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"when and how\"), \": Your containers in the last chapters were built by \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ko\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"apko\"), \". What if a specific version of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ko\"), \" has a malicious function to inject a backdoor to containers? The SBoM doesn't include tooling information though!\")), mdx(\"h2\", {\n    \"id\": \"preliminaries\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#preliminaries\",\n    \"aria-label\": \"preliminaries permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Preliminaries\"), mdx(\"p\", null, \"Run the following commands to install requirements:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"go install github.com/google/go-containerregistry/cmd/crane@v0.11.0\\ngo install github.com/sigstore/cosign/cmd/cosign@v1.10.1\\n\")), mdx(\"h2\", {\n    \"id\": \"container-signing\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#container-signing\",\n    \"aria-label\": \"container signing permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Container Signing\"), mdx(\"h3\", {\n    \"id\": \"sign-container-images-by-cosign\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#sign-container-images-by-cosign\",\n    \"aria-label\": \"sign container images by cosign permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Sign Container Images by Cosign\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cosign\"), \" allows us to give a signature to a container image. The signature lets us to verify who signed the container.\\nTo sign the image with an ephemeral key + Fulcio, you can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cosign sign\"), \" command as follows:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"# Generate an image to sign + Sign the image with an ephemeral key\\n\\n# in fish\\nset IMAGE_NAME ttl.sh/(uuidgen | tr [:upper:] [:lower:]):4h\\ndocker run -v \\\"$PWD\\\":/work distroless.dev/apko build src/alpine-base.yaml $IMAGE_NAME apko-alpine.tar\\ncrane push apko-alpine.tar $IMAGE_NAME\\n\\nset IMAGE_NAME_HASHED $IMAGE_NAME@(crane digest $IMAGE_NAME)\\nCOSIGN_EXPERIMENTAL=1 cosign sign $IMAGE_NAME_HASHED\\n\\n\\n# in bash\\nIMAGE_NAME=ttl.sh/$(uuidgen | tr [:upper:] [:lower:]):4h\\ndocker run -v \\\"$PWD\\\":/work distroless.dev/apko build src/alpine-base.yaml $IMAGE_NAME apko-alpine.tar\\ncrane push apko-alpine.tar $IMAGE_NAME\\n\\nIMAGE_NAME_HASHED=$IMAGE_NAME@$(crane digest $IMAGE_NAME)\\nCOSIGN_EXPERIMENTAL=1 cosign sign $IMAGE_NAME\\n\")), mdx(\"p\", null, \"To verify the signature, run the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"COSIGN_EXPERIMENTAL=1 cosign verify $IMAGE_NAME_HASHED | jq\\n\")), mdx(\"p\", null, \"We reviewed the following problem, but now your colleagues may heave a sigh of relief once they find your signature in the image!\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"What if a container running in production environments is suspicious and one gets worried about who generated the image?\")), mdx(\"h3\", {\n    \"id\": \"exercise-optional-cosign-internals\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#exercise-optional-cosign-internals\",\n    \"aria-label\": \"exercise optional cosign internals permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Exercise (optional): Cosign Internals\"), mdx(\"p\", null, \"What's happening behind signing process by Cosign? What does the command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cosign verify\"), \" actually verify?\"), mdx(\"h2\", {\n    \"id\": \"software-attestation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#software-attestation\",\n    \"aria-label\": \"software attestation permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Software Attestation\"), mdx(\"h3\", {\n    \"id\": \"overvivew\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#overvivew\",\n    \"aria-label\": \"overvivew permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Overvivew\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"A software attestation\"), \" is an authenticated statement about a software artifact or collection of software artifacts. Here's an example of attestations quoted from SLSA docs:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/slsa-framework/slsa/raw/main/docs/images/attestation_example_english.svg\",\n    \"alt\": \"Quoted from SLSA docs\"\n  })), mdx(\"p\", null, \"The figure includes some unfamiliar words. Let's check definitions:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"https://github.com/slsa-framework/slsa/raw/main/docs/images/attestation_layers.svg\",\n    \"alt\": \"Quoted from SLSA docs\"\n  })), mdx(\"ul\", {\n    parentName: \"blockquote\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Artifact:\"), \" Immutable blob of data described by an attestation, usually\\nidentified by cryptographic content hash. Examples: file content, git\\ncommit, container digest. May also include a mutable locator, such as\\na package name or URI.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Attestation:\"), \" Authenticated, machine-readable metadata about one or more\\nsoftware artifacts. An attestation MUST contain at least:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Envelope:\"), \" Authenticates the message. At a minimum, it MUST contain:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Message:\"), \" Content (statement) of the attestation. The message\\ntype SHOULD be authenticated and unambiguous to avoid confusion\\nattacks.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Signature:\"), \" Denotes the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"attester\"), \" who created the attestation.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Statement:\"), \" Binds the attestation to a particular set of artifacts.\\nThis is a separate layer to allow for predicate-agnostic processing\\nand storage/lookup. MUST contain at least:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Subject:\"), \" Identifies which artifacts the predicate applies to.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Predicate:\"), \" Metadata about the subject. The predicate type SHOULD\\nbe explicit to avoid misinterpretation.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Predicate:\"), \" Arbitrary metadata in a predicate-specific schema. MAY\\ncontain:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Link:\"), \" \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"(repeated)\"), \" Reference to a related artifact, such as\\nbuild dependency. Effectively forms a \", \"[hypergraph]\", \" where the\\nnodes are artifacts and the hyperedges are attestations. It is\\nhelpful for the link to be standardized to allow predicate-agnostic\\ngraph processing.\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Bundle:\"), \" A collection of Attestations, which are usually but not\\nnecessarily related.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Storage/Lookup:\"), \" Convention for where attesters place attestations and\\nhow verifiers find attestations for a given artifact.\"))), mdx(\"p\", null, \"Once Attestations\"), mdx(\"h3\", {\n    \"id\": \"predicate-httpsspdxdevdocument\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#predicate-httpsspdxdevdocument\",\n    \"aria-label\": \"predicate httpsspdxdevdocument permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Predicate: \", mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"https://spdx.dev/Document\")), mdx(\"p\", null, \"First, build a container image with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"apko\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"# Generate an image to sign + Sign the image with an ephemeral key\\n\\n# in fish\\nset IMAGE_NAME ttl.sh/(uuidgen | tr [:upper:] [:lower:]):4h\\ndocker run -v \\\"$PWD\\\":/work distroless.dev/apko build src/alpine-base.yaml $IMAGE_NAME apko-alpine.tar\\ncrane push apko-alpine.tar $IMAGE_NAME\\n\\n# in bash\\nIMAGE_NAME=ttl.sh/$(uuidgen | tr [:upper:] [:lower:]):4h\\ndocker run -v \\\"$PWD\\\":/work distroless.dev/apko build src/alpine-base.yaml $IMAGE_NAME apko-alpine.tar\\ncrane push apko-alpine.tar $IMAGE_NAME\\n\")), mdx(\"p\", null, \"Then you'll see \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sbom-*.spdx.json\"), \" in the current directory. You can attest it to the container image by the following commands:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"COSIGN_EXPERIMENTAL=1 cosign attest $IMAGE_NAME --predicate sbom-*.spdx.json --type spdxjson\\n\")), mdx(\"p\", null, \"To see the attestation(s), run the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"cosign download attestation $IMAGE_NAME\\n\")), mdx(\"p\", null, \"To verify the attestation(s), run the following:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"COSIGN_EXPERIMENTAL=1 cosign verify-attestation $IMAGE_NAME --type spdxjson\\n\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.sigstore.dev/cosign/attestation/\"\n  }, \"https://docs.sigstore.dev/cosign/attestation/\")), mdx(\"h3\", {\n    \"id\": \"exercise-optional-cosign-internals-1\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#exercise-optional-cosign-internals-1\",\n    \"aria-label\": \"exercise optional cosign internals 1 permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Exercise (optional): Cosign Internals\"), mdx(\"p\", null, \"What's happening behind attestation process by Cosign? What does the command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cosign verify-attestation\"), \" actually verify?\"), mdx(\"h3\", {\n    \"id\": \"exercise-optional-attest-more\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#exercise-optional-attest-more\",\n    \"aria-label\": \"exercise optional attest more permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Exercise (optional): Attest More!\"), mdx(\"p\", null, \"A tool \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/testifysec/witness\"\n  }, \"witness\"), \" allows you to generate more attestations on build.\"), mdx(\"h3\", {\n    \"id\": \"exercise-work-with-trivy\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#exercise-work-with-trivy\",\n    \"aria-label\": \"exercise work with trivy permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Exercise: Work with Trivy\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"# \\u9069\\u5F53\\u306B\\u542B\\u307E\\u308C\\u3066\\u3044\\u308B\\u8106\\u5F31\\u6027\\u691C\\u67FB\\u3092\\u3057\\u305F\\u3044\\u30A4\\u30E1\\u30FC\\u30B8\\u3092\\u7528\\u610F\\u3059\\u308B\\n\\n# in bash or zsh\\ndocker pull alpine:3.10\\nset IMAGE_NAME ttl.sh/$(uuidgen | tr \\\"[:upper:]\\\" \\\"[:lower:]\\\"):8h\\ndocker tag alpine:3.10 $IMAGE_NAME\\ndocker push $IMAGE_NAME\\n\\n# in fish\\ndocker pull alpine:3.10\\nset IMAGE_NAME ttl.sh/(uuidgen | tr [:upper:] [:lower:]):8h\\ndocker tag alpine:3.10 $IMAGE_NAME\\ndocker push $IMAGE_NAME\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"# Canary \\u7248 Trivy \\u3092\\u62FE\\u3063\\u3066\\u304F\\u308B\\uFF08\\u6700\\u65B0\\u306E\\u30EA\\u30EA\\u30FC\\u30B9\\u306B\\u6A5F\\u80FD\\u304C\\u542B\\u307E\\u308C\\u3066\\u3044\\u306A\\u3044\\u305F\\u3081\\u2026\\u2026\\uFF09\\n# https://github.com/aquasecurity/trivy/actions/runs/2832002363\\n\\n# Trivy \\u3067\\u8106\\u5F31\\u6027\\u60C5\\u5831\\u3092\\u30B9\\u30AD\\u30E3\\u30F3\\u3059\\u308B\\ntrivy image --format cosign-vuln --output vuln.json $IMAGE_NAME\\n\\n# \\u30B9\\u30AD\\u30E3\\u30F3\\u3057\\u3066\\u51FA\\u3066\\u304D\\u305F\\u7D50\\u679C\\u3092\\u30A4\\u30E1\\u30FC\\u30B8\\u306B attest \\u3059\\u308B\\nCOSIGN_EXPERIMENTAL=1 cosign attest --type vuln --predicate vuln.json $IMAGE_NAME\\n\\n# attestation \\u3092 verify \\u3059\\u308B\\nCOSIGN_EXPERIMENTAL=1 cosign verify-attestation $IMAGE_NAME --type vuln\\n\")), mdx(\"h2\", {\n    \"id\": \"continuous-review-of-sbom\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#continuous-review-of-sbom\",\n    \"aria-label\": \"continuous review of sbom permalink\",\n    \"className\": \"anchor before\"\n  }, mdx(\"svg\", {\n    parentName: \"a\",\n    \"aria-hidden\": \"true\",\n    \"focusable\": \"false\",\n    \"height\": \"16\",\n    \"version\": \"1.1\",\n    \"viewBox\": \"0 0 16 16\",\n    \"width\": \"16\"\n  }, mdx(\"path\", {\n    parentName: \"svg\",\n    \"fillRule\": \"evenodd\",\n    \"d\": \"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"\n  }))), \"Continuous Review of SBoM\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Info\"), \"\\nComing soon!\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"depth":2,"value":"Preliminaries"},{"depth":2,"value":"Container Signing"},{"depth":3,"value":"Sign Container Images by Cosign"},{"depth":3,"value":"Exercise (optional): Cosign Internals"},{"depth":2,"value":"Software Attestation"},{"depth":3,"value":"Overvivew"},{"depth":3,"value":"Predicate: https://spdx.dev/Document"},{"depth":3,"value":"Exercise (optional): Cosign Internals"},{"depth":3,"value":"Exercise (optional): Attest More!"},{"depth":3,"value":"Exercise: Work with Trivy"},{"depth":2,"value":"Continuous Review of SBoM"}]}},"pageContext":{"slug":"/chapters/hardening-artifacts/","prev":{"label":"Hardening Builds","link":"/chapters/hardening-builds"},"next":{"label":"Hardening Delivery","link":"/chapters/hardening-delivery"},"repositoryEditUrl":"https://github.com/supply-chain-security-book/supply-chain-security-book.github.io/tree/main/src/docs/chapters/hardening-artifacts/index.mdx","repositoryProvider":"GitHub"}},"staticQueryHashes":["1954253342","2328931024","2501019404","973074209"]}